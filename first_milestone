import numpy as np 
#import sympy as sp
from functools import reduce
from scipy.linalg import expm
from scipy.linalg import eigh

import matplotlib.pyplot as plt


from numpy.typing import ArrayLike
import networkx as nx

from mpl_toolkits.axes_grid1.inset_locator import zoomed_inset_axes, mark_inset

from collections import Counter









def sigma_z(n,j): #must be that n>j

    #assert n>j
     #j must be greater than two?

    #I_2 = np.array([1,0],[0,1])
    I_2 = np.eye(2)
    S_Z = np.array([[1,0],[0,-1]])

    if j == 1:  
        TP_1 = np.eye(1)
    else:
        TP_1 = reduce(np.kron, [I_2]*(j-1)) #this repeats the tensor product of I_2 j-1 times

    
    if j==n:
        TP_2 = np.eye(1)
    else:

        TP_2 = reduce(np.kron, [I_2]*(n-j))

    final = np.kron(np.kron(TP_1,S_Z),TP_2)
    
    return final


#to initialize H_ising now

def H_ising(n,M,kappa):

    #M is the adjacency matrix
    h = np.zeros(n)

    for k in range(0,n): #range doesn't include n, goes from 0 to n-1 here!!

        total = 0

        for j in range(0,n):

            total += -(M[k,j]+M[j,k])

        h[k] = total + kappa

    
    #to find H_ising now
    H = np.zeros((2**n,2**n))
    H_2 = np.zeros((2**n,2**n))
    for k in range(1,n+1):   #1 to n


        H_2 += h[k-1]*sigma_z(n,k)
        

        for j in range(k+1,n+1): #k+1 to n

            H += (M[k-1,j-1]*sigma_z(n,k)@sigma_z(n,j)) 
    
    return (H+H_2)



def Ising_search(H):

    #min_val = float('inf') #this is positive infinity
    
    val_dict = {}    

    val_dict['min_val']= float('inf')
    val_dict['index'] = None             

    for i in range(len(H)):  #H_ising will only have diagonal terms and be a perfect square matrix...

        if H[i,i] < val_dict['min_val']:

            val_dict['min_val'] = H[i,i]
            val_dict['index'] = i

    return val_dict['index']




#test code -----------------------------------------------------------------#
M = np.array([[0,1,1,0,0],[0,0,1,0,1],[0,0,0,1,1],[0,0,0,0,0],[0,0,0,0,0]])

J = np.array([[0,1,0],[0,0,1],[0,0,0]])  #3 dim case

H = H_ising(5,M,0.5)

#print(H)

#print("min value is" + str(np.min(H)))

#print(H[19,19])

#print(sigma_z(5,4).shape)

#print(Ising_search(H))

#---------------------------------------------------------------------------#

#time adiabatic problem now



#figure out how wavefunction evolves in time too

def init_psi(n):    #start with this wavefunction in the evolution!

    up_state = (1/(2)**0.5)*np.array([[1],[1]])

    initial = up_state
    for i in range(n-1):  #n-1 since 1 counts as its self...
        initial = np.kron(initial,up_state)
    
    return initial



def sigma_j(n,i,choice): #must be that n>j


    #assert n>j
     #j must be greater than two?

    #I_2 = np.array([1,0],[0,1])
    I_2 = np.eye(2)
    
    if choice == 'x':

        S = np.array([[0,1],[1,0]])

    if choice == 'y':

        S = np.array([[0,-1j],[1j,0]])

    if choice == 'z':

        S = np.array([[1,0],[0,-1]])

    if i == 1:  
        TP_1 = np.eye(1)
    else:
        TP_1 = reduce(np.kron, [I_2]*(i-1)) #this repeats the tensor product of I_2 j-1 times

    
    if i==n:
        TP_2 = np.eye(1)
    else:

        TP_2 = reduce(np.kron, [I_2]*(n-i))

    final = np.kron(np.kron(TP_1,S),TP_2)
    
    return final


def sigma_x(n,j): #must be that n>j

    #assert n>j
     #j must be greater than two?

    #I_2 = np.array([1,0],[0,1])
    I_2 = np.eye(2)
    S_X = np.array([[0,1],[1,0]])

    if j == 1:  
        TP_1 = np.eye(1)
    else:
        TP_1 = reduce(np.kron, [I_2]*(j-1)) #this repeats the tensor product of I_2 j-1 times

    
    if j==n:
        TP_2 = np.eye(1)
    else:

        TP_2 = reduce(np.kron, [I_2]*(n-j))

    final = np.kron(np.kron(TP_1,S_X),TP_2)
    
    return final

def Hamiltonian(n,t,t_max,M):

    A = lambda t, t_max: 1 - (t/t_max)

    B = lambda t, t_max: t/t_max


    val = np.zeros((2**n,2**n))
    for i in range(1,n+1):
        val -= sigma_x(n,i)

    
    H_t = A(t,t_max)*val + B(t,t_max)*H_ising(n,M,0.5) #kappa = 0.5
    H_t = (H_t + H_t.T.conj()) / 2 
    return H_t



def adiabatic_evol(t_max, M, n, q=200):  #assume for now k and q are the same as in the eqn...

    W = init_psi(n)  #W for wavefunction...

    vals = np.zeros(q+1)
    dt = t_max/q

    for i in range(0,q):   #we have -1 to include 0 in range

        W = np.dot(expm(-1j*dt*Hamiltonian(n,i*dt,t_max,M)),W)  #is this matrix multiplication?

        

        vals[i] = W


        if np.isnan(W).any():
            print(i)
            break
    return vals

def sigma_x_j(n):
    val = np.zeros((2**n,2**n))
    for i in range(1,n+1):
        val -= sigma_x(n,i)

    return val


###--------------------------------------degeneracy check of sigma_x sum

# s = sigma_x_j(5)

# eigenvalues, _ = np.linalg.eig(s)

# rounded_eigenvalues = np.round(eigenvalues, decimals=6)

# degeneracy_dict = Counter(rounded_eigenvalues)

# print(degeneracy_dict)

####--------------------------------------------

#build a program to write probabilties 

def ground_wf(n,M: ArrayLike):  #is set to be a covector!  #one to be compared to!!

    H = H_ising(n,M,0.5) #kappa set to 0.5

    i = Ising_search(H)

    vector = np.zeros((2**n))

    vector[i] = 1

    return vector






def adiabatic_prob(t_max: list, M: ArrayLike, n, q=150):

    #w_0 = np.conjugate(ground_wf(n,M))  #already conjugated

    w_0 = ground_wf(n,M)

    num_val = len(t_max)

    values = np.zeros((num_val,q+1), dtype = complex)  #might be an issue with num_val value...

    j_index = -1

    for t_m in t_max:
        
        
        j_index += 1

        W = init_psi(n)

        dt = t_m/q

        for i in range(0,q+1):   #we have -1 to include 0 in range #original range(q,-1,-1)


            
            W = np.dot(expm(-1j*dt*Hamiltonian(n,i*dt,t_m,M)),W)  #is this matrix multiplication?

            #calculate probabilty
            norm = abs(np.vdot(W,W))  #norm should be conserved...since unitary operator?

            

            prob = abs(((np.vdot(np.conjugate(W),w_0))))**2/norm  #this should be correct...

            #print("this is the prob"+str(prob))

            #print(W.shape)

            #print(abs(np.vdot(w_0,W)**2/np.vdot(W,W)))

            
            

            values[j_index, i] = np.real(prob)


            if np.isnan(W).any():
                print("values too large, stopped at index: "+str(i))
                break
    return values


t_max = [1,2,5,10,100]


#v = adiabatic_prob(t_max, M, 5)

#print(v)


#print(len(v[0]))   #for given example, is 3 x 1001  3 rows, 1001 columns for q =1000


def plot_prob(vals_1, vals_2, t_max, numbers):   #vals_1 and vals_2 have to be the same size , THIS IS NOT A GENERAL PLOT FUNCTION!!

    rows_1 = len(vals_1)
    rows_2 = len(vals_2)

    x_1 = np.linspace(0,1,len(vals_1[0]))
    x_2 = np.linspace(0,1,len(vals_2[0]))


    for j_index, j in enumerate(vals_1): #assume its the same in t_max

        

        

        tau = t_max[j_index]
       
        plt.plot(x_1,j, label = f" $\\tau = {tau}$")

    
    for k_index, k in enumerate(vals_2):

        tau = numbers[k_index]
        plt.plot(x_2,k, label = f"$\\tau = {tau}$", linestyle = "--") 


        
    plt.ylabel("Success Probability", fontsize = 20)

    plt.xlabel(r"$(t/\tau)$", fontsize = 15)

    plt.legend(fontsize = 15)

    plt.yticks(fontsize = 15)
    plt.xticks(fontsize = 15)

    plt.show()


#plot_prob(v)


def plot_wavefunction_evolution(vals):   #delete this??! 

    iterations = len(vals)


    x = list(iterations)

    plt.plot(x,vals)

    plt.xlabel("iterations")

    plt.ylabel("wavefunction")

    plt.show()

#values = adiabatic_evol(10, M, 5, 200)

#plot_wavefunction_evolution(values)




    


# now we want to measure the annealing schedule based on N:

#first we want to construct a random adjacency matrix,M , of dimension N:

def generate_adjacency_matrix(n):

    M = np.zeros((n,n), dtype = int)  #put dtype to ensure no floats in zero entries


    for i in range(n):
        for j in range(i+1,n):  #add i+1 to ensure they aren't self connected - can this be added though??

            edge = np.random.choice([0,1])

            M[i,j] = edge

    return M


def visualize_graph(adj_matrix):

    graph = nx.from_numpy_matrix(adj_matrix)

    plt.figure(figsize=(8, 8))  # Set the figure size
    nx.draw(
        graph,
        with_labels=True,            # Show node labels
        node_color='skyblue',        # Node color
        node_size=500,               # Node size
        edge_color='gray',           # Edge color
        font_size=10,                # Font size for labels
    )
    plt.title("Graph Visualization")
    plt.show()




def verify_min_value_H(H_ising):  #this function returns a tuple!!

    minimum_value = np.min(H_ising)

    i = Ising_search(H_ising)

    if minimum_value == H_ising[i,i]:
        return True, minimum_value
    else:

        return False







#test generate and visualize the graph!!

# n = 6

# g = generate_adjacency_matrix(n)

# #visualize_graph(g)

# H = H_ising(n,g,0.5)

# print(verify_min_value_H(H))   H is always diagonal!

#------------------------------------------







def graph_annealing_time_against_N(q,list_of_dimensions,t_max_step):


    tau = np.zeros(len(list_of_dimensions))

    for index, n in enumerate(list_of_dimensions):

        

        g = generate_adjacency_matrix(n)

        w_0 = ground_wf(n,g)

        
        tau_index = index
        

        t_max = 10  #start with this for t_max?

        success = False

        while success == False:

            W = init_psi(n)

            

            dt = t_max/q

            for i in range(0,q+1):

                W = np.dot(expm(-1j*dt*Hamiltonian(n,i*dt,t_max,M)),W)  

            #calculate probabilty
                norm = abs(np.vdot(W,W))  #norm should be conserved...since unitary operator?
                prob = abs(((np.vdot(np.conjugate(W),w_0))))**2/norm
                #print(prob)
                if prob >= 0.90:
                    print("success")
                    success = True

                    tau[tau_index] = t_max

                    break
            print("increase")
            t_max += t_max_step

    x_val = list_of_dimensions

    y_val = tau

    plt.plot(x_val,y_val)

    plt.show()

                    



##----------------------------------------------------

#l = [3,4,5,6,7]

#graph_annealing_time_against_N(50,l,10)


# t_max = [1,5,100]

# n = 5

#g = generate_adjacency_matrix(n)


#visualize_graph(g)   

#plot_prob(adiabatic_prob(t_max,M,n),adiabatic_prob([100],g,n))


#-----------------------------------------------------------


#PROBLEM!! it doesn't always work - is that since the gap gets too small - it sometimes goes to half or an incomplete probability for example... does that mean required annealing time is very long?



# try create something that for a given g will calculate the energy gap - and if is above a certain annealing amount, quit the annealing


def eigenvalue_graph(M,t_max,q,n):

    dt = t_max/q

    eigenvalues_set = np.zeros((q+1, 4))

    #---------------------------

    H_0 = H_ising(n,M,0.5)

    actual_eigenvalue_ground = np.min(H_0)

    #----------------------------



    for i in range(0,q+1):

        h = Hamiltonian(n, i*dt, t_max, M)

        eigenvalues, eigenfunctions = eigh(h)

        eigenvalues = np.sort(eigenvalues)
        
        eigenvalues_set[i,0] = eigenvalues[0]

        eigenvalues_set[i,1] = eigenvalues[1]

        eigenvalues_set[i,2] = eigenvalues[2]  #for second
        eigenvalues_set[i,3] = eigenvalues[3]   #for third excited energy state, for the example which is three fold degenerate is necessary!!

        if i ==q:                   #DEBUGGING
            if np.allclose(H_0, h): 

                print("True")
            else:
                print("not right")
                print(np.min(h))
                print(i*dt/t_max)
                print(h)

    x_val = np.linspace(0,1,q+1)

    eigenvalue_difference = eigenvalues_set[:,1]-eigenvalues_set[:,0]

    eigenvalue_difference = eigenvalue_difference**-2

    
    #plt.plot(x_val, eigenvalue_difference, linestyle = "--")
    plt.plot(x_val,eigenvalues_set[:,0], label= "ground state energy")
    plt.plot(x_val, eigenvalues_set[:,1], label = "first excited state energy")
    plt.plot(x_val,eigenvalues_set[:,2], label= "second excited state energy")
    plt.plot(x_val, eigenvalues_set[:,3], label = "third excited state energy")
    plt.scatter(x_val[-1], actual_eigenvalue_ground, label = "true ground state eigenvalue", s = 10, color = 'red')
    plt.legend()
    plt.show()
    print(eigenvalue_difference[-1])



# --------------------TEST EXAMPLE

# n = 6

# g = generate_adjacency_matrix(n)

# visualize_graph(g)   

# eigenvalue_graph(g,1000,150,n)

# plot_prob(adiabatic_prob([1000],g,n,500))

#------------------------------------




# NOW we want to make this appropriate for the



def eigenvalue_diff_check(M,t_max,q,n):   #returns True if is valid; False otherwise



    dt = t_max/q

    eigenvalues_set = np.zeros((q+1, 2))


    for i in range(0,q+1):

        h = Hamiltonian(n, i*dt, t_max, M)

        eigenvalues, eigenfunctions = eigh(h)

        eigenvalues = np.sort(eigenvalues)
        
        eigenvalues_set[i,0] = eigenvalues[0]

        eigenvalues_set[i,1] = eigenvalues[1]
    

    eigenvalue_difference = eigenvalues_set[:,1]-eigenvalues_set[:,0]

    if np.all(eigenvalue_difference > 0):

        return True
    else:
        return False
    


def generate_valid_adjacency_matrix(n):

    valid_adjacency_matrix = False

    #use rough parameters, should work for all

    t_max = 500

    q = 150

    

    while valid_adjacency_matrix == False:

        generated_matrix = generate_adjacency_matrix(n)

        if eigenvalue_diff_check(generated_matrix, t_max, q , n) == True:

            valid_adjacency_matrix = True

    
    return generated_matrix


#-------------------------------TEST

# n = 5

# g_v = generate_valid_adjacency_matrix(n)

# visualize_graph(g_v)

# eigenvalue_graph(g_v, 500, 150, n)

# plot_prob(adiabatic_prob([1,10,100],g_v,n,500))

#---------------------------------------



            

def graphs_for_the_poster(n,M,t_max,q):

    g = generate_adjacency_matrix(n)

    eigenvalue_graph(g)

    eigenvalue_graph(M)

        

    










def E_res(M,n, T_range,T_num,q):

    H_classical = H_ising(n,M,0.5)

    E_0 = np.min(H_classical)


    #T_num = int(T_range/T_step)

    t_max_values = np.linspace(1,T_range,num = T_num, dtype = int)

    E_res_values = np.zeros(T_num)


    w_0 = ground_wf(n,M)

    t_max_index = -1

    found = False

    index_of_zero_E_res = None

    for t_max in t_max_values:


        W = init_psi(n)

        t_max_index += 1

        dt = t_max/q

        for i in range(0,q+1):

            W = np.dot(expm(-1j*dt*Hamiltonian(n,i*dt,t_max,M)),W)  

            if i == q:

                
                E_current = np.dot(W.conj().T, np.dot(H_classical,W))
                E_res_values[t_max_index] = E_current[0,0] - E_0
                
                if found == False and E_res_values[t_max_index] < 0.01:
                
                    found = True

                    index_of_zero_E_res = t_max_index

                
                    







    

    #plt.scatter(t_max_values[index_of_zero_E_res], E_res_values[index_of_zero_E_res], color = "green", s = 10)
    #plt.plot(t_max_values, E_res_values)

    #plt.show()

    return t_max_values[index_of_zero_E_res]


#E_res(M,5,40,40,150)



#--------------------------------------------------------

# n = 5

# g_v = generate_valid_adjacency_matrix(n)

# eigenvalue_graph(g_v, 1000,150,n)


# t_to_test = E_res(g_v,n,100,30,100)
# print(t_to_test)

# plot_prob(adiabatic_prob([t_to_test], g_v, n, 100))


#--------------------------------------------------------



def plot_n_and_Tmax(n_initial, n_final, repeats):

    n_num = n_final - n_initial +1

    n_array = np.linspace(n_initial, n_final, endpoint=True, num = n_num, dtype=int)

    t_vals = np.zeros((n_num, repeats))
    n_vals = np.zeros((n_num, repeats))


    for n_index, n in enumerate(n_array):

        for i in range(repeats):

            g_v = generate_valid_adjacency_matrix(n)

            t_value = E_res(g_v, n, 100, 30, 100)   #might need to fidget around with this... make more precise!!

            t_vals[n_index, i] = t_value

            n_vals[n_index, i] = n


    for i, subarray in enumerate(t_vals):

        plt.scatter(n_vals[i], subarray)

    plt.show()



#plot_n_and_Tmax(3,5,5)







#----------------------------------

g = np.array([[0,1,1,1,1],[0,0,1,1,0],[0,0,0,0,0,],[0,0,0,0,1],[0,0,0,0,0]])  #this matrix should have degenerate ground state eigenvalues

n = 5

#eigenvalue_graph(g,1000,100,n)


####### g is threefold degenerate in the ground state - so expect three similar values 




    


def check_degeneracy(M, n):

    h = H_ising(n,M,0.5)

    min_val = np.min(h)

    count = np.sum(h == min_val)

    if count > 0:
        print("is degenerate")
        
    else:
        print("not degenerate")
    return count




def degenerate_eigenvalue_graph(M,t_max,q,n):

    dt = t_max/q

    eigenvalues_set = np.zeros((q+1, 4))

    #---------------------------

    H_0 = H_ising(n,M,0.5)

    actual_eigenvalue_ground = np.min(H_0)

    #----------------------------



    for i in range(0,q+1):

        h = Hamiltonian(n, i*dt, t_max, M)

        eigenvalues, eigenfunctions = eigh(h)

        eigenvalues = np.sort(eigenvalues)
        
        eigenvalues_set[i,0] = eigenvalues[0]

        eigenvalues_set[i,1] = eigenvalues[1]

        eigenvalues_set[i,2] = eigenvalues[2]  #for second
        eigenvalues_set[i,3] = eigenvalues[3]   #for third excited energy state, for the example which is three fold degenerate is necessary!!

        if i ==q:                   #DEBUGGING
            if np.allclose(H_0, h): 

                print("True")
            else:
                print("not right")
                print(np.min(h))
                print(i*dt/t_max)
                print(h)

    x_val = np.linspace(0,1,q+1)

    eigenvalue_difference = eigenvalues_set[:,1]-eigenvalues_set[:,0]

    eigenvalue_difference = eigenvalue_difference**-2

    
    



    fig, ax = plt.subplots(figsize=(10, 6))
    ax.plot(x_val, eigenvalues_set[:,0], label="ground state energy", color = "grey")
    ax.plot(x_val, eigenvalues_set[:,1], label="first excited state energy", color = "red")
    ax.plot(x_val, eigenvalues_set[:,2], label="second excited state energy", color = "green")
    ax.plot(x_val, eigenvalues_set[:,3], label="third excited state energy", color = "blue")
    ax.scatter(x_val[-1], actual_eigenvalue_ground, label = "true ground state energy", s = 10, color = 'black')
    #ax.scatter()
    ax.set_xlabel(r"$(t/\tau)$", fontsize = 13)
    ax.set_ylabel("Eigenvalue", fontsize = 20)
    ax.legend(loc = "lower left", fontsize = 12)
    ax.tick_params(axis="x", labelsize=14)  
    ax.tick_params(axis="y", labelsize=14)


    axins = zoomed_inset_axes(ax, zoom=15, loc="upper right")
    axins.plot(x_val , eigenvalues_set[:,1], label="first excited state energy", color = "red")
    axins.plot(x_val, eigenvalues_set[:,2], label="second excited state energy", color = "green")
    axins.plot(x_val, eigenvalues_set[:,3], label="third excited state energy", color = "blue")

    axins.set_xlim(0, 0.02)
    axins.set_ylim(-3.0,-2.95)

    axins.tick_params(axis="both", which="both", labelsize=6)

    axins.set_xticks([0,0.01,0.02])
    axins.set_yticks([-3.0,-2.975])

    

    mark_inset(ax, axins, loc1=2, loc2=4, fc="none", ec="0.5", ls = "--")

    plt.tight_layout()
    plt.show()



###--------------------GRAPHS

#print(E_res(M,n,50,50,200))

#t_max = [1,5,26]

#number = [1,50,1000]
#plot_prob(adiabatic_prob(t_max,M,n),adiabatic_prob(number,g,n), t_max, number)


degenerate_eigenvalue_graph(g,1000,100,n)  

###---------------------------







    

def degenerate_graph_check(M,t_max,q,n,stop_value):

    dt = t_max/q

    eigenvalues_set = np.zeros((q+1, 4))

    #---------------------------

    H_0 = H_ising(n,M,0.5)

    actual_eigenvalue_ground = np.min(H_0)

    #----------------------------



    for i in range(0,q+1):

        h = Hamiltonian(n, i*dt, t_max, M)

        eigenvalues, eigenfunctions = eigh(h)

        eigenvalues = np.sort(eigenvalues)
        
        eigenvalues_set[i,0] = eigenvalues[0]

        eigenvalues_set[i,1] = eigenvalues[1]

        eigenvalues_set[i,2] = eigenvalues[2]  #for second
        eigenvalues_set[i,3] = eigenvalues[3]   #for third excited energy state, for the example which is three fold degenerate is necessary!!

        if i ==q:                   #DEBUGGING
            if np.allclose(H_0, h): 

                print("True")
            else:
                print("not right")
                print(np.min(h))
                print(i*dt/t_max)
                print(h)

    x_val = np.linspace(0,1,q+1)

    eigenvalue_difference = eigenvalues_set[:,1]-eigenvalues_set[:,0]

    eigenvalue_difference = eigenvalue_difference**-2

    plt.plot(x_val[:stop_value], eigenvalues_set[:stop_value,1])
    plt.plot(x_val[:stop_value], eigenvalues_set[:stop_value,2])
    plt.plot(x_val[:stop_value], eigenvalues_set[:stop_value,3])

    
    plt.plot()


    
    plt.show()



#degenerate_graph_check(g,100,150,n,10)  


####shows they start at the same value!!!!








